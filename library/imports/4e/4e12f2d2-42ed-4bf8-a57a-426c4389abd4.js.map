{"version":3,"sources":["..\\..\\..\\..\\assets\\scripts/assets\\scripts\\Game.js"],"names":["Player","require","Star","Spear","Game","cc","Class","extends","Component","properties","starPrefab","default","type","Prefab","maxStarDuration","minStarDuration","ground","Node","player","spear","scoreDisplay","Label","scoreAudio","AudioClip","btnNode","SpearNode","GameOver","collider","BoxCollider","colliderPlayer","onLoad","groundY","y","height","timer","starDuration","currentStar","currentStarX","node","on","EventType","TOUCH_START","console","log","Global","reset","callback","count","unschedule","intervalSetting","schedule","TOUCH_MOVE","TOUCH_END","startMoveAt","resetCount","TOUCH_CANCEL","enabled","score","starPool","NodePool","ApplePool","OrangePool","onStartGame","resetScore","x","active","v2","spawnNewStar","newStar","size","get","This","instantiate","addChild","setPosition","getNewStarPosition","getComponent","game","Math","random","despawnStar","star","put","randX","randY","jumpHeight","maxX","width","update","dt","gameOver","gainScore","string","audioEngine","playEffect","stopMove","destroy"],"mappings":"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","file":"Game.js","sourceRoot":"..\\..\\..\\..\\assets\\scripts","sourcesContent":["\nconst Player = require('Player');\nconst Star = require('Star');\nconst Spear = require('Spear');\nvar Game = cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // 这个属性引用了星星预制资源\n        starPrefab: {\n            default: null,\n            type: cc.Prefab\n        },\n        // 星星产生后消失时间的随机范围\n        maxStarDuration: 0,\n        minStarDuration: 0,\n        // 地面节点，用于确定星星生成的高度\n        ground: {\n            default: null,\n            type: cc.Node\n        },\n        // player 节点，用于获取主角弹跳的高度，和控制主角行动开关\n        player: {\n            default: null,\n            type: Player\n        },\n        spear: {\n            default: null,\n            type: Spear\n        },\n        // score label 的引用\n        scoreDisplay: {\n            default: null,\n            type: cc.Label\n        },\n        // 得分音效资源\n        scoreAudio: {\n            default: null,\n            type: cc.AudioClip\n        },\n        btnNode: {\n            default: null,\n            type: cc.Node\n        },\n        SpearNode: {\n            default: null,\n            type: cc.Node\n        },\n        GameOver: {\n            default: null,\n            type: cc.Node\n        },\n\n        collider: {\n            default: null,\n            type: cc.BoxCollider\n        },\n        colliderPlayer: {\n            default: null,\n            type: cc.BoxCollider\n        },\n    },\n\n    onLoad: function () {\n        // 获取地平面的 y 轴坐标\n        this.groundY = this.ground.y + this.ground.height/2;\n        // 初始化计时器\n        this.timer = 0;\n        this.starDuration = 0;\n        // Current Star\n        this.currentStar = null;\n        this.currentStarX = 0;\n\n        //Collision manager\n\n\n        this.node.on(cc.Node.EventType.TOUCH_START, () => { \n            console.log(\"TOUCH_START\")\n            Global.reset = 0;\n    \n                // this.schedule(function() {\n                //     // Here `this` is referring to the component\n                //     console.log(this.intervalSetting());\n                // }, 1);\n\n                this.callback = function () {\n                    if (Global.count === 3 || Global.reset == 1) {\n                        // Cancel this timer at the sixth call-back\n                        this.unschedule(this.callback);\n\n                    }\n                    else if(Global.count < 3 || Global.reset == 0){\n                        this.spear.intervalSetting();\n                        console.log(Global.count);\n\n                    }\n\n\n                    \n                \n                }\n                this.schedule(this.callback, 1);\n            \n\n\n        }, this, true);\n\n        this.node.on(cc.Node.EventType.TOUCH_MOVE, () => {\n            console.log(\"TOUCH_MOVE\");\n            \n\n        }, this, true);\n\n        this.node.on(cc.Node.EventType.TOUCH_END, () => {\n            console.log(\"TOUCH_END\");\n            this.spear.startMoveAt();\n            this.spear.resetCount();\n\n        }, this, true);\n\n        this.node.on(cc.Node.EventType.TOUCH_CANCEL, () => {\n            console.log(\"TOUCH_CANCEL\");\n            this.spear.resetCount();\n        }, this, true);\n\n\n        this.enabled=false;\n        // 初始化计分\n        this.score = 0;\n\n        // initialize star and score pool\n        this.starPool = new cc.NodePool('Star');\n        this.ApplePool = new cc.NodePool('Apple');\n        this.OrangePool = new cc.NodePool('Orange');\n    },\n\n    intervalSetting: function() {\n  \n      \n        Global.count += 1;\n        Global.reset = 0;\n        return Global.count;\n    \n},\n\n    resetCount: function(){\n        Global.count = 0;\n        Global.reset = 1;\n\n        return Global.reset; \n\n\n    },\n\n\n    onStartGame: function(){\n\n        this.resetScore();\n\n        this.enabled=true\n\n        this.btnNode.x = 3000;\n        this.GameOver.active = false;\n\n        this.player.startMoveAt(cc.v2(0, this.groundY));\n\n        \n\n\n        // 生成一个新的星星\n        this.spawnNewStar();\n    },\n    \n\n\n    spawnNewStar: function() {\n        // 使用给定的模板在场景中生成一个新节点\n        var newStar = null;\n\n        if (this.starPool.size()>0){\n            newStar = this.starPool.get(This);\n        }\n        else{\n            var newStar = cc.instantiate(this.starPrefab);\n        }\n        // 将新增的节点添加到 Canvas 节点下面\n        this.node.addChild(newStar);\n        // 为星星设置一个随机位置\n        newStar.setPosition(this.getNewStarPosition());\n        // 在星星组件上暂存 Game 对象的引用\n        newStar.getComponent('Star').game = this;\n        // 重置计时器，根据消失时间范围随机取一个值\n        this.starDuration = this.minStarDuration + Math.random() * (this.maxStarDuration - this.minStarDuration);\n        this.timer = 0;\n        this.currentStar = newStar;\n    },\n\n    despawnStar: function(star){\n        this.starPool.put(star);\n        this.spawnNewStar();\n\n    },\n\n\n\n    \n\n    getNewStarPosition: function () {\n        var randX = 0;\n        // 根据地平面位置和主角跳跃高度，随机得到一个星星的 y 坐标\n        var randY = this.groundY + Math.random() * this.player.getComponent('Player').jumpHeight + 50;\n        // 根据屏幕宽度，随机得到一个星星 x 坐标\n        var maxX = this.node.width/2;\n        randX = (Math.random() - 0.5) * 2 * maxX;\n        // 返回星星坐标\n        return cc.v2(randX, randY);\n    },\n\n    update: function (dt) {\n        // 每帧更新计时器，超过限度还没有生成新的星星\n        // 就会调用游戏失败逻辑\n        if (this.timer > this.starDuration) {\n            this.gameOver();\n            this.enabled = false;   // disable gameOver logic to avoid load scene repeatedly\n            return;\n        }\n        this.timer += dt;\n    },\n\n    gainScore: function () {\n        this.score += 1;\n        // 更新 scoreDisplay Label 的文字\n        this.scoreDisplay.string = 'Score: ' + this.score;\n        // 播放得分音效\n        cc.audioEngine.playEffect(this.scoreAudio, false);\n    },\n\n    resetScore: function(){\n        // Resetting the score\n        this.score = 0;\n        // Display the reset score\n        this.scoreDisplay.string = 'Score: ' + this.score;\n    },\n\n\n    gameOver: function () {\n        this.GameOver.active = true;\n        this.player.enabled = false;\n        this.player.stopMove();\n        this.currentStar.destroy();\n        this.btnNode.x = 0;\n\n    }\n});"]}